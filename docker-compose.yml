version: "3.7"

services:

  rabbit:
    image: rabbitmq:management
    ports:
      - 5672:5672
      - 15672:15672
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:15672"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5

  dotnet-producer:
    image: svladimirovich/dotnet-producer
    build:
      dockerfile: Dockerfile
      context: ./dotnet/Producer
    environment: 
      - RABBIT_HOST=rabbit
      - TARGET_QUEUE=jobs_queue
      - EXCHANGE=jobs_exchange
      - TARGET_ROUTING_KEY=job_producer
    depends_on:
      - rabbit

  java-consumer:
    image: svladimirovich/java-worker
    build:
      dockerfile: dev.Dockerfile
      context: ./java/worker
    # volumes:
    #   - maven-repository:/root/.m2
    environment: 
      - SPRING_PROFILES_ACTIVE=consumer
    depends_on:
      - rabbit
      
  java-producer:
    image: svladimirovich/java-worker
    build:
      dockerfile: dev.Dockerfile
      context: ./java/worker
    # volumes:
    #   - maven-repository:/root/.m2
    environment: 
      - SPRING_PROFILES_ACTIVE=producer
    depends_on:
      - rabbit

  go-producer:
    image: svladimirovich/go-producer
    build:
      dockerfile: Dockerfile
      context: ./golang/producer
      args:
        RABBIT_HOST: rabbit:5672
    depends_on:
      - rabbit

  nodejs-consumer:
    image: svladimirovich/nodejs-consumer
    build:
      dockerfile: Dockerfile
      context: ./nodejs/consumer
    environment:
      - RABBIT_HOST=rabbit
      - EXCHANGE=jobs_exchange
      - SOURCE_QUEUE=jobs_queue
      - SOURCE_ROUTING_KEY=job_producer
      - TARGET_ROUTING_KEY=result_producer      


  wshost:
    image: svladimirovich/wshost
    build:
      dockerfile: Dockerfile
      context: ./nodejs/backend
    ports:
      - 8090:8080
    environment:
      - TARGET_QUEUE=jobs_queue
      - RESULT_ROUTING_KEY=result_producer
      - RABBIT_HOST=rabbit
    depends_on:
      - rabbit
      
  monitor:
    image: svladimirovich/monitor
    build:
      dockerfile: Dockerfile
      context: ./nodejs/frontend
      args:
        WS_HOST: wshost:8080
    ports:
      - 8080:80
    depends_on:
      - wshost
    # This would be a problem if compose file used in swarm
    volumes:
      - ./nodejs/frontend/www:/usr/share/nginx/html

  # This works only in swarm
  # visualizer:
  #   image: dockersamples/visualizer:stable
  #   ports:
  #     - "8100:8080"
  #   volumes:
  #     - "/var/run/docker.sock:/var/run/docker.sock"
  #   deploy:
  #     placement:
  #       constraints: [node.role == manager]
      
# still not working
# volumes:
#   maven-repository: